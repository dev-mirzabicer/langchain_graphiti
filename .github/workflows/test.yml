name: Test and Lint

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Install dependencies
        run: poetry install --all-extras
      - name: Run linting
        run: |
          poetry run ruff check .
          poetry run mypy src
      - name: Run tests
        env:
            GRAPHITI_CROSS_ENCODER_MODEL: ${{ vars.GRAPHITI_CROSS_ENCODER_MODEL }}
            GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
            GRAPHITI_LLM_MODEL: ${{ vars.GRAPHITI_LLM_MODEL }}
            GRAPHITI_EMBEDDER_MODEL: ${{ vars.GRAPHITI_EMBEDDER_MODEL }}
            NEO4J_URI: ${{ secrets.NEO4J_URI }}
            NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
            NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
            DEFAULT_DATABASE: ${{ secrets.DEFAULT_DATABASE }}
        run: poetry run pytest --asyncio-mode=auto -m "not integration"
      - name: Run integration tests
        if: success() && matrix.python-version == '3.11'
        env:
            GRAPHITI_CROSS_ENCODER_MODEL: ${{ vars.GRAPHITI_CROSS_ENCODER_MODEL }}
            GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
            GRAPHITI_LLM_MODEL: ${{ vars.GRAPHITI_LLM_MODEL }}
            GRAPHITI_EMBEDDER_MODEL: ${{ vars.GRAPHITI_EMBEDDER_MODEL }}
            NEO4J_URI: ${{ secrets.NEO4J_URI }}
            NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
            NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
            DEFAULT_DATABASE: ${{ secrets.DEFAULT_DATABASE }}
        run: poetry run pytest --asyncio-mode=auto -m integration